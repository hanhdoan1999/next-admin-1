// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

generator nextAdmin {
  provider = "next-admin-generator-prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  hashedPassword String?
  name           String?
  posts          Post[]    @relation("author") // One-to-many relation
  birthDate      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  role           Role      @default(USER)
  avatar         String?
  metadata       Json?
}

model Post {
  id         Int                 @id @default(autoincrement())
  title      String
  content    String?
  published  Boolean             @default(false)
  author     User                @relation("author", fields: [authorId], references: [id]) // Many-to-one relation
  authorId   Int
  categories CategoriesOnPosts[]
  rate       Decimal?            @db.Decimal(5, 2)
  order      Int                 @default(0)
  tags       String[]
}

model Category {
  id        Int                 @id @default(autoincrement())
  name      String
  posts     CategoriesOnPosts[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
}

model CategoriesOnPosts {
  id         Int      @default(autoincrement())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  order      Int      @default(0)

  @@id([postId, categoryId])
}


model Account {
  account_id                              Int       @id @default(autoincrement())
  arcade_username                         String?   @unique
  wallet_address                          String    @unique
  email                                   String?   @unique
  id_token                                String
  verifier_id                             String    @unique
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  profile                                 Profile?
  player_launch_games                     PlayerLaunchGame[]
}

model Profile {
  profile_id                              Int     @id @default(autoincrement())
  account_id                              Int     @unique
  display_picture                         String?
  x_handle                                String?
  discord_handle                          String?
  telegram_handle                         String?
  is_receive_notification                 Boolean @default(false)
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  account                                 Account @relation(fields: [account_id], references: [account_id])
}

model PlayerLaunchGame {
  player_game_id                          Int      @id @default(autoincrement())
  account_id                              Int
  game_id                                 Int
  timestamp_of_last_launch                DateTime
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  account                                 Account  @relation(fields: [account_id], references: [account_id])
  game                                    Game     @relation(fields: [game_id], references: [game_id])
}

model Game {
  game_id                                 Int      @id @default(autoincrement())
  title                                   String?
  description                             String?
  deeplink_url                            String?
  game_thumbnail_url                      String?
  game_background_url                     String?
  ios_app_id                              String?
  blockchain_id                           Int?
  is_partnered_game                       Boolean       @default(false)
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  blockchain                              Blockchain?     @relation(fields: [blockchain_id], references: [blockchain_id])
  player_launch_games                     PlayerLaunchGame[]
  game_tag_relations                      GameTagRelation[]
  game_section_relations                  GameSectionRelation[]
  game_medium                             GameMedia[]
  game_platform_relations                 GamePlatformRelation[]
}

model Blockchain {
  blockchain_id                           Int      @id @default(autoincrement())
  blockchain_name                         String
  blockchain_logo                         String
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  games                                   Game[]
}

model GameTag {
  game_tag_id                             Int      @id @default(autoincrement())
  game_tag_description                    String
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  game_tag_relations                      GameTagRelation[]
}

model GameTagRelation {
  id                                      Int      @id @default(autoincrement())
  game_id                                 Int
  game_tag_id                             Int
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  game                                    Game     @relation(fields: [game_id], references: [game_id])
  game_tag                                GameTag  @relation(fields: [game_tag_id], references: [game_tag_id])
}

model GameSection {
  game_section_id                         Int      @id @default(autoincrement())
  title                                   String
  order_index                             Int?
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  game_section_relations                  GameSectionRelation[]
}

model GameSectionRelation {
  id                                      Int         @id @default(autoincrement())
  game_id                                 Int
  game_section_id                         Int
  game_order_in_section                   Int?
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  game                                    Game        @relation(fields: [game_id], references: [game_id])
  game_section                            GameSection @relation(fields: [game_section_id], references: [game_section_id])
}

model GamePlatform {
  game_platform_id                        Int      @id @default(autoincrement())
  game_platform_name                      String?
  game_platform_logo                      String?
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  game_platform_relations                 GamePlatformRelation[]
}

model GamePlatformRelation {
  id                                      Int      @id @default(autoincrement())
  game_id                                 Int
  game_platform_id                        Int
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  game                                    Game     @relation(fields: [game_id], references: [game_id])
  game_platform                           GamePlatform  @relation(fields: [game_platform_id], references: [game_platform_id])
}

model GameMedia {
  game_media_id                           Int      @id @default(autoincrement())
  game_id                                 Int
  medium_url                              String?
  file_type                               String?
  created_at                              DateTime  @default(now())
  updated_at                              DateTime? @updatedAt

  game                                    Game     @relation(fields: [game_id], references: [game_id])
}